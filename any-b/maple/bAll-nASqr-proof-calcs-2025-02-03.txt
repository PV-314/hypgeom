# this file contains one function for each of the four main steps of the proof:
# step1_check() for r0=1, p/q \neq p_r0/q_r0*zeta_4
# step2_check() for r0=1, p/q = p_r0/q_r0*zeta_4
# step3_check() for r0>1, p/q \neq p_r0/q_r0*zeta_4
# step4_check() for r0>1, p/q = p_r0/q_r0*zeta_4

step1_check:=proc()
	local bExp1a,bExp1b,c,c0,c1,c2,c3,cUB1,d4,dExp1a,dExp1b,dLBCnst1a,dLBCnst1b,
	fKfEll,gNd4Min,gpLB,k0,
	nAExp1a,nAExp1b,omega14UB,p,pRts,qUBCnst,uExp1b,v,y1LB,y1LBCnst,y2UB1Cnst,y2UB2Cnst,y2UB2SqrCnst:
	
	#tol:=0.0001:
	
	fKfEll:=1: # max "constant" value in Prop 3.1. So here it is 1 because f_k*f_ell \leq b^4
	c:=0.75:
	d4:=exp(1.68): # from Lemma 2.3(a)
	gNd4Min:=2: # min value of |g|\cN_{d',4} from (3.36) in Lemma 3.11
	k0:=0.89: # from (2.8) near the end of Section 2
	gpLB:=57.32: # constant in the gap principle when -N_alpha is a square
	y1LB:=4: #=2^2 is the value with no assumptions like (4.1) on Y_1
	y1LBCnst:=10: # the constant in the denominator of the lower bound for y_{k1}

	c0:=2/y1LB: # c0 in the current gap principle proof
	c0:=round_up(c0,1):
	printf("c0=%8.6f\n",c0):
	p:=x^8-8*x^6+20*x^4-16*x^2+c0*c0:
	pRts:=[fsolve(p,x=0..1)]:
	if nops(pRts)<> 1 then
		print("ERROR: bad p=",p,", real roots are ",pRts):
		return():
	end if:

	c3:=pRts[1]: # notation c3 is from Lemma 3.6(b) (lemma to prove gap principle)
	omega14UB:=c3: # (2/y2LB/y2LB)^(1/4):
	omega14UB:=round_up(omega14UB,3):
	printf("omega14 approximation UB=%8.6f (like eqn (3.31)\n",omega14UB):
	c1:=omega14UB: # 0.16
	c2:=(2-c1*c1)*sqrt(4-c1*c1): # from Lemma 3.6(a)
	# 3 place in c2 gives 76.3 as the final constant in step 4:
	c2:=round_down(c2,4):
	printf("c1=%8.6f, c2=%10.8f\n",c1,c2):

	# E and Q calcs
	qUBCnst:=d4*4: # in (4.9), the UB for Q
	qUBCnst:=round_up(qUBCnst,4):
	
	print("Step (i)"):
	v:=qUBCnst/gNd4Min: # using v as we have 21.47/2, but in paper use 10.74
	v:=round_up(v,6):
	printf("v(temp)=%9.6f\n",v):
	y2UB1Cnst:=2*k0/c2:
	y2UB1Cnst:=round_up(y2UB1Cnst,2):
	printf("y_ell^3 UB1Cnst=%9.6f\n",y2UB1Cnst):
	y2UB2Cnst:=(y2UB1Cnst*v)^4:
	y2UB2Cnst:=round_up(y2UB2Cnst,3):
	printf("y_ell^3<%8.6f*(b(1-c))^(-4)*(|N_a|*f_k*f_l)^2*y_k^5\n",y2UB2Cnst):
	y2UB2SqrCnst:=fKfEll^2*y2UB2Cnst:
	print("y2UB2SqrCnst=",y2UB2SqrCnst):
	printf("y_ell^3<%8.6f*(b/(1-c))^4*|N_a|^2*y_k^5\n",y2UB2SqrCnst):
	
	cUB1:=(y2UB2SqrCnst*(1-c)^(-4)/gpLB^12)^(1/22):
	cUB1:=round_up(cUB1,2):
	nAExp1a:=(2+2*12)/22:
	bExp1a:=(4+4*12)/22:
	dExp1a:=(2*12)/22:
	printf("y_k<%8.6f*|N_a|^(%a)*b^(%a)/d^(%a)\n",cUB1,nAExp1a,bExp1a,dExp1a):

	dExp1b:=1+dExp1a:
	nAExp1b:=nAExp1a-1:
	nAExp1b:=nAExp1b/dExp1b:
	bExp1b:=(2+bExp1a)/dExp1b:
	uExp1b:=4/dExp1b:
	dLBCnst1a:=(cUB1*y1LBCnst)^(1/dExp1b):
	dLBCnst1a:=round_up(dLBCnst1a,3):
	printf("d>%8.6f*nA^(%a)*b^(%a)/u^(%a)\n",dLBCnst1a,nAExp1b,bExp1b,uExp1b):

	dExp1b:=nAExp1b:
	bExp1b:=bExp1b+4*dExp1b:
	printf("d>%8.6f*d^(%a)*b^(%a)/u^(%a)\n",dLBCnst1a,dExp1b,bExp1b,uExp1b):
	dExp1b:=1-dExp1b:
	dLBCnst1b:=dLBCnst1a^(1/dExp1b):
	dLBCnst1b:=round_up(dLBCnst1b,3):
	bExp1b:=bExp1b*(1/dExp1b):
	uExp1b:=uExp1b*(1/dExp1b):
	printf("d>%8.6f*b^(%a)/u^(%a)\n",dLBCnst1b,bExp1b,uExp1b):
end proc:

step2_check:=proc()
	local bExp2a,bExp2b,bExp2c,dExp2a,dExp2b,dExp2c,gpLB,nAExp2a,nAExp2b,
	nAExp2c,uExp2c,yk3UBCnst,ykCnst2a,ykCnst2b:

	gpLB:=57.32: # constant in the gap principle when -N_alpha is a square
	yk3UBCnst:=1.73: # from equation (4.15) in the b=1 sqrs paper

	print("Step (ii)"):
	ykCnst2a:=4*yk3UBCnst/gpLB^4:
	ykCnst2a:=round_up(ykCnst2a,1):
	bExp2a:=4*4:
	dExp2a:=2*4-1:
	nAExp2a:=2*4-1:
	printf("y_k^6<%8.6f*|N_a|^%a*b^%a/d^%a\n",ykCnst2a,nAExp2a,bExp2a,dExp2a):

	ykCnst2b:=ykCnst2a^(1/6):
	ykCnst2b:=round_up(ykCnst2b,1):
	bExp2b:=bExp2a/6:
	dExp2b:=dExp2a/6:
	nAExp2b:=nAExp2a/6:
	printf("y_k<%8.6f*|N_a|^(%a)*b^(%a)/d^(%a)\n",ykCnst2b,nAExp2b,bExp2b,dExp2b):

	bExp2c:=(bExp2b+2)/(1+dExp2b):
	nAExp2c:=(nAExp2b-1)/(1+dExp2b):
	uExp2c:=4/(1+dExp2b):
	printf("d>|N_a|^(%a)*b^(%a)*u^(%a)\n",nAExp2c,bExp2c,uExp2c):

	dExp2c:=1-nAExp2c:
	bExp2c:=(bExp2c+4*nAExp2c)*(1/dExp2c):
	uExp2c:=uExp2c*(1/dExp2c):
	printf("d>b^(%a)/u^(%a)\n",bExp2c,uExp2c):
end proc:

step3_check:=proc()
	local bExp1,bExp2,bnd1,c,c0,c1,c2,c2Exp1,c2v,c3,c4_14v,c42,c4v,c5,c5_14v,c5v,c7v,c8,d4,dExp1,dExp2,dLB1,dLB2,
	eLBCnst,eLBDenom,fBnd,k0,l0UB,nAExp1,omega14UB,p,pRts,qBnd,qLB,qUBCnst,
	rat1_1,rat1_2,rat2_1,rat2_2,rat3_1,rat3_2,thUBCnst,tol,twoExp1,uExp1,uExp2,vLHS1,vLHS2,vLHS3,vLHS4,vLHS5,
	vRHS1,vRHS2,vRHS3,vRHS5,vRHS6,vRHS7,vRHS8,x1LBCnst,y1LB,y2UB1Cnst,yK3LBCnst:
	
	tol:=0.0001:
	c:=0.75:
	c42:=0.2: # from Lemma 2.3(a)
	d4:=exp(1.68): # from Lemma 2.3(a)
	k0:=0.89: # from (2.8) near the end of Section 2
	y1LB:=4: #=2^2 is the value with no assumptions like (4.1) on Y_1
	#gNd4Min:=2: # min value of |g|\cN_{d',4} from (3.36) in Lemma 3.11
	thUBCnst:=2.29: # from Lemma 3.8(a)

	# here c0, c1, c2, c3 are notation from gap principle section of initial JNT paper with b=1.
	# E.g., c3 is from Lemma 3.6(b) three (lemma to prove gap principle)
	c0:=2/y1LB:
	c0:=round_up(c0,1):
	printf("c0=%8.6f\n",c0):
	p:=x^8-8*x^6+20*x^4-16*x^2+c0*c0:
	pRts:=[fsolve(p,x=0..1)]:
	if nops(pRts)<> 1 then
		print("ERROR: bad p=",p,", real roots are ",pRts):
		return():
	end if:

	c3:=pRts[1]:
	omega14UB:=c3: # (2/y2LB/y2LB)^(1/4):
	omega14UB:=round_up(omega14UB,3):
	printf("omega14 approximation UB=%8.6f (like eqn (3.31)\n",omega14UB):
	c1:=omega14UB: # 0.16
	c2:=(2-c1*c1)*sqrt(4-c1*c1): # from Lemma 3.6(a)
	# 3 place in c2 gives 76.3 as the final constant in step 4:
	c2:=round_down(c2,4):
	printf("c1=%8.6f, c2=%10.8f\n",c1,c2):

	print("\nx_k bounds:"):
	x1LBCnst:=(y1LB^2-1.0)/y1LB^2: # see equation {eq:25}
	x1LBCnst:=round_down(x1LBCnst,4):
	printf("x_k^2>%12.11f*d*y_k^2\n",x1LBCnst):

	# E and Q calcs
	print("\nE and Q calcs:"):
	eLBDenom:=4*d4/2:
	eLBDenom:=round_up(eLBDenom,4):
	printf("cnst in E lb denom=%8.6f\n",eLBDenom):
	eLBCnst:=(1+sqrt(x1LBCnst))/eLBDenom:
	eLBCnst:=round_down(eLBCnst,4):
	printf("eLBCnst=%8.6f\n",eLBCnst):
	qUBCnst:=d4*4: # in (4.9), the UB for Q
	qUBCnst:=round_up(qUBCnst,4):
	lprint("qUBCnst=",qUBCnst):
	qLB:=2*d4*(1+sqrt(x1LBCnst)): # from eqn (4.7)
	qLB:=round_down(qLB,4):
	printf("Q geq %8.6f\n",qLB):
	
	l0UB:=c42*thUBCnst:
	l0UB:=round_up(l0UB,2):

	# STEP 3
	print("Step (iii)"):
	qBnd:=(qLB-1)/qLB:
	qBnd:=round_down(qBnd,3):
	printf("(Q-1)/(Q-1/E)>(Q-1)/Q>%8.6f\n",qBnd):

	bnd1:=qBnd*sqrt(x1LBCnst)/l0UB:
	bnd1:=round_down(bnd1,3):
	printf("(y_{k1}*y_{k3})^(1/4)>%8.6f*b*c*sqrt(d)*y_k/sqrt(N_a*f_k*f_l)*(ELB)^(r0-1)\n",bnd1):
	y2UB1Cnst:=2*k0/c2:
	y2UB1Cnst:=round_up(y2UB1Cnst,2):
	printf("y_l^3 UBCnst=%9.6f\n",y2UB1Cnst):
	
	yK3LBCnst:=bnd1/eLBCnst:
	yK3LBCnst:=round_down(yK3LBCnst,4):
	printf("equation (4.21): y_{k3}>(%8.6f/g/Nd4*sqrt(N_a/f_k/f_l))^4*stuff\n",yK3LBCnst):
	print("now apply upper bound for y_{k3}"):
	
	# equation (4.22)
	vLHS1:=(nA*f1*f3)^2*(y2UB1Cnst/b/(1-c))^4*(qUBCnst/gN4)^(4*r0)*d^(2*r0-2)*y1^(4*r0+1):
	vRHS1:=(yK3LBCnst*b*c*sqrt(nA/f1/f3)/gN4)^12*(eLBCnst*gN4/nA)^(12*r0)*d^(6*r0)*y1^(12*r0-3):
	rat1_1:=subs(r0=1,vLHS1/vRHS1):
	rat1_2:=subs(r0=2,vLHS1/vRHS1):
	
	# an intermediate step between equation (4.22) and the next displayed inequality:
	c5v:=qUBCnst^2/eLBCnst^6:
	c5v:=round_up(c5v,3):
	print("using c5=",c5v):
	vLHS2:=(nA*f1*f3)^2*nA^6/d^4*(y2UB1Cnst/b/(1-c))^4*(qUBCnst/gN4)^2*(gN4/yK3LBCnst/b/c*sqrt(f1*f3/nA))^12*(1/eLBCnst/gN4)^6*(qUBCnst^2/gN4^2/eLBCnst^6/gN4^6)^(2*r0-1):
	vRHS2:=(y1^4*d^2/nA^6)^(2*r0-1):
	rat2_1:=subs(r0=1,vLHS2/vRHS2):
	rat2_2:=subs(r0=2,vLHS2/vRHS2):
	# print it out to check/see (had b^4 in denom before, rather than b^16)
	lprint("we get the constants, 0.00143 and 1.22, in the intermediate inequality from here:"):
	print("vLHS2(intermediate LHS)=",vLHS2):
	
	# comparing sides in both inequalities
	if not type(evalf(rat1_1/rat2_1),numeric) or abs(evalf(rat1_1/rat2_1)-1)>tol then
		print("ERROR: the ratios of the sides of the equations do not match for r0=1. rat1_1/rat2_1=",rat1_1/rat2_1):
		return():
	fi:

	if not type(evalf(rat1_2/rat2_2),numeric) or abs(evalf(rat1_2/rat2_2)-1)>tol then
		print("ERROR: the ratios of the sides of the equations do not match for r0=2. rat1_2/rat2_2=",rat1_2/rat2_2):
		return():
	fi:

	# from vLHS2:
	c4v:=(y2UB1Cnst/(1-c))^4*qUBCnst^2*(1/yK3LBCnst/c)^12*(1/eLBCnst)^6:
	c4v:=round_up(c4v,3):
	print("using c4=",c4v,"=",c4v^(1/4),"^4"):
	# c4_14v=4th root of c4v
	c4_14v:=round_up(c4v^(1/4),3):
	# 1.22*10^7 comes from rounding up the quantity in vLHS2 output (see above):
	c5_14v:=c5v^(1/4):
	c5_14v:=round_up(c5_14v,3):
	print("using c5^(1/4)=",c5_14v):
	# equation (4.23)
	vLHS3:=(f1*f3)^8*c4v*nA^2*gN4^4/b^16/d^4:
	vRHS3:=(y1^4*d^2*gN4^8/nA^6/c5_14v^4)^(2*r0-1):
	rat3_1:=subs(r0=1,vLHS3/vRHS3):
	rat3_2:=subs(r0=2,vLHS3/vRHS3):
	# print it out again
	print("vLHS3(4.23 LHS)=",vLHS3,", vRHS3=",vRHS3):

	# comparing sides in both inequalities
	if not type(evalf(rat2_1/rat3_1),numeric) or evalf(rat2_1/rat3_1)<0.98 or evalf(rat2_1/rat3_1)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=1. rat2_1/rat3_1=",rat2_1/rat3_1):
		return():
	fi:

	if not type(evalf(rat2_2/rat3_2),numeric) or evalf(rat2_2/rat3_2)<0.97 or evalf(rat2_2/rat3_2)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=2. rat2_2/rat3_2=",rat2_2/rat3_2):
		return():
	fi:
	
	fBnd:=b*b:
	vLHS4:=subs(f1=fBnd,f3=fBnd,vLHS3):
	print("vLHS4(4.24)=",vLHS4):

	vLHS5:=c4*b^16*nA^2*gN4^4/d^4:
	print("with c4=",c4v,"=",c4_14v,"^4: symbolic (4.24)=",vLHS5):

	vRHS5:=simplify(vLHS5^(1/(2*r0-1)),symbolic):
	vRHS5:=simplify((vRHS5*c5^4*nA^6/gN4^8/d^2)^(1/4),symbolic):
	print("with c5^(1/4)=",c5_14v,": yK1>",vRHS5):
	
	dExp1:=(1+2*r0)/(2*r0-1)/2:
	vRHS6:=vRHS5*d^dExp1/nA/u^4*10*b^2:
	vRHS6:=simplify(subs(gN4=2,vRHS6),symbolic):
	print("d^",(1+dExp1),">",vRHS6):

	dExp2:=simplify(1+dExp1):
	vRHS7:=simplify(vRHS6^(1/dExp2),symbolic):
	print("(4.25) d>",vRHS7):
	
	nAExp1:=2*r0/(6*r0-1):
	print("nA exponent at r0=2=",subs(r0=2,nAExp1)):
	
	bExp1:=4*(1+2*r0)/(6*r0-1):
	print("b exponent at r0=2=",subs(r0=2,bExp1)):

	uExp1:=8/(6*r0-1)*(2*r0-1):
	print("u exponent at r0=2=",subs(r0=2,uExp1)):
	
	c3:=100^(1/(6*r0-1)*(2*r0-1))*c2^(2/(6*r0-1)*(2*r0-1))*c4_14^(2/(6*r0-1))/4^((-3+4*r0)/(6*r0-1)):
	c3:=simplify(subs(c4_14=195/1000,c2=592/10,c3),symbolic):
	print("c3=",c3):
	
	c2Exp1:=2*(2*r0-1)/(6*r0-1):
	print("c2 exponent=",c2Exp1,"=2/3+",simplify(c2Exp1-2/3)):
	
	twoExp1:=2*(4*r0-3)/(6*r0-1):
	print("2 exponent=",twoExp1,"=4/3+",simplify(twoExp1-4/3)):
	
	c7v:=c4_14v^6*2^14/(10*c5_14v)^4:
	print("c4_14^6*2^14/(10*c5_14)^4=",c7v," ^(1/3/(6*2-1))=",evalf(c7v^(1/3/(6*2-1)))," ^(1/3/(6*3-1))=",evalf(c7v^(1/3/(6*3-1)))):
	if c7v>1 then
		print("BAD: c7v=",c7v," must be less than 1"):
		return():
	fi:
	
	c8:=evalf((10*c5v)^(2/3)/2^(4/3)):
	print("(10*c5)^(2/3)/2^(4/3)=",c8):
	c8:=ceil(c8):
	dLB1:=c8*nA^subs(r0=2,nAExp1)*b^subs(r0=2,bExp1)/u^subs(r0=2,uExp1):
	print("d>",dLB1):
	
	vRHS8:=simplify(subs(nA=d*b^4,vRHS7)):
	print("d>",vRHS8):
	dExp2:=2*r0/(6*r0-1):
	vRHS8:=simplify(vRHS8/d^dExp2,symbolic):
	dExp2:=simplify(1-dExp2,symbolic):
	dLB2:=simplify(vRHS8^(1/dExp2),symbolic):
	print("d>",dLB2):
	
	bExp2:=4*(1+4*r0)/(4*r0-1):
	print("b exponent=4+",simplify(bExp2-4)," at r0=2=",subs(r0=2,bExp2)):

	uExp2:=8/(4*r0-1)*(2*r0-1):
	print("u exponent=4+",simplify(uExp2-4)," at r0=2=",subs(r0=2,uExp2)):
end proc:

step4_check:=proc()
	local bExp2,c,c1v,c2v,c3v,c4v,c5v,c6v,c7v,cv,dExp1,dExp2,dExp3,dLB1,dLB2,eBase,eLBCnst,fBnd,gN4v,gnExp2,
	nAExp1,nAExp2,
	rat1_1,rat1_2,rat2_1,rat2_2,rat2_3,rat3_1,rat3_2,rat3_3,tol,twoExp2,uExp2,
	vLHS1,vLHS2,vLHS3,vLHS5,vLHS5Cnst,vLHS6,
	vRHS1,vRHS2,vRHS3,vRHS4,
	vRHS5,vRHS6,vRHS7,yK1UBCnst,yK3LBCnst,yLB1:
	
	tol:=0.0001:
	cv:=0.75:
	eBase:=0.175: # base of exponential used to obtain (4.26)
	eLBCnst:=0.1832:
	fBnd:=b*b:
	gN4v:=2:
	yK1UBCnst:=1.73: # constant on LHS of (4.21)
	yK3LBCnst:=10.91:
	
	# first inequality in Section 4.5
	vLHS1:=yK1UBCnst*r0^(1/2)*(4*d/nA)^r0*y1^(2*r0+1):
	vRHS1:=(yK3LBCnst*b*c*sqrt(nA/f1/f3)/gN4)^4*(eLBCnst*gN4/nA)^(4*r0)*d^(2*r0)*y1^(4*r0-1):
	rat1_1:=subs(r0=1,c=cv,vLHS1/vRHS1):
	rat1_2:=subs(r0=2,c=cv,vLHS1/vRHS1):
	
	# an intermediate step before (4.26)
	vLHS2:=yK1UBCnst*r0^(1/2):
	vRHS2:=(yK3LBCnst*b*c*sqrt(nA/f1/f3)/gN4)^4*(eLBCnst^4*gN4^4/4/nA^3)^r0*d^r0*y1^(2*r0-2):
	rat2_1:=subs(r0=1,c=cv,vLHS2/vRHS2):
	rat2_2:=subs(r0=2,c=cv,vLHS2/vRHS2):
	rat2_3:=subs(r0=3,c=cv,vLHS2/vRHS2):
	
	# comparing sides in both inequalities
	if not type(evalf(rat1_1/rat2_1),numeric) or evalf(rat1_1/rat2_1)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=1. rat1_1/rat2_1=",rat1_1/rat2_1):
	fi:

	if not type(evalf(rat1_2/rat2_2),numeric) or evalf(rat1_2/rat2_2)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=2. rat1_2/rat2_2=",rat1_2/rat2_2):
	fi:

	# equation (4.26)
	c:=cv:
	vLHS3:=1:
	vRHS3:=(yK3LBCnst*b*c*sqrt(nA/f1/f3)/gN4)^4*(eBase^4*gN4^4/4/nA^3)*d/yK1UBCnst*(eBase^4*gN4^4/4/nA^3*d*y1^2)^(r0-1):
	rat3_1:=subs(r0=1,vLHS3/vRHS3):
	rat3_2:=subs(r0=2,vLHS3/vRHS3):
	rat3_3:=subs(r0=3,vLHS3/vRHS3):
	# print it out again
	print("vRHS3(4.26 RHS)=",vRHS3):

	# comparing sides in both inequalities
	if not type(evalf(rat2_1/rat3_1),numeric) or evalf(rat2_1/rat3_1)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=1. rat2_1/rat3_1=",evalf(rat2_1/rat3_1)):
	fi:

	if not type(evalf(rat2_2/rat3_2),numeric) or evalf(rat2_2/rat3_2)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=2. rat2_2/rat3_2=",evalf(rat2_2/rat3_2)):
	fi:

	if not type(evalf(rat2_3/rat3_3),numeric) or evalf(rat2_3/rat3_3)>1 then
		print("ERROR: the ratios of the sides of the equations do not match for r0=3. rat2_3/rat3_3=",evalf(rat2_3/rat3_3)):
	fi:
	
	# from vRHS3:
	c1v:=(yK3LBCnst*c)^4*(eBase^4/4)/yK1UBCnst:
	print("need c1<",c1v):
	c1v:=round_down(c1v,3):
	#c1v:=0.607:
	
	c2v:=eBase^4/4:
	print("need c2<",c2v):
	c2v:=round_down(c2v,4):
	#c2v:=0.0002344:

	vRHS4:=subs(f1=fBnd,f3=fBnd,vRHS3):
	print("(after applying (4.12)) vRHS4=",vRHS4):

	vLHS5:=b^4*nA/d/c1v:
	vLHS5Cnst:=round_up(lcoeff(vLHS5),4):
	vLHS5:=vLHS5/lcoeff(vLHS5)*vLHS5Cnst:
	vRHS5:=(c2v*gN4^4/nA^3*d*y1^2)^(r0-1):
	print("vLHS5=",vLHS5,", vRHS5=",vRHS5):
	
	c3v:=1/c1v:
	print("need c3>",c3v):
	c3v:=round_up(c3v,4):
	vLHS5:=b^4*nA/d*c3:

	yLB1:=vLHS5^(1/(r0-1))*nA^3/c2/gN4^4/d:
	yLB1:=simplify(yLB1^(1/2),symbolic):
	print("yK1>",yLB1):
	
	dExp1:=r0/(r0-1)/2: # recall that this is in the denominator
	print("dExp1=",1/2,"+",simplify(dExp1-1/2)):
	nAExp1:=(1/2*(-2+3*r0)/(r0-1)):
	print("nAExp1=",3/2,"+",simplify(nAExp1-3/2)):
	c4v:=sqrt(1/c2v):
	print("c4>",c4v):
	c4v:=65.4:

	dExp2:=simplify(1+dExp1):
	vLHS6:=d^dExp2:
	vRHS6:=simplify(yLB1*10*b*b/u^4/nA*d^dExp1,symbolic):
	print("d^",dExp2,">",vRHS6):

	dLB1:=simplify(vRHS6^(1/dExp2),symbolic):
	print("d>",dLB1):
	
	nAExp2:=r0/(-2+3*r0):
	print("nA exponent=",1/3+simplify(nAExp2-1/3),", at r0=2=",subs(r0=2,nAExp2)):
	
	bExp2:=4*r0/(-2+3*r0):
	print("b exponent=",4/3+simplify(bExp2-4/3),", at r0=2=",subs(r0=2,bExp2)):

	gnExp2:=4/(-2+3*r0)*(r0-1):
	print("gN4 exponent=",4/3+simplify(gnExp2-4/3),", at r0=2=",subs(r0=2,gnExp2)):

	uExp2:=8/(-2+3*r0)*(r0-1):
	print("u exponent=",8/3+simplify(uExp2-8/3),", at r0=2=",subs(r0=2,uExp2)):
	
	twoExp2:=(r0-1)/(-2+3*r0):
	print("(100/c2) exponent=",1/3+simplify(twoExp2-1/3),", at r0=2=",subs(r0=2,twoExp2)):
	
	c5v:=evalf((100/c2v/gN4v^4)^(1/3)):
	c5v:=ceil(c5v):
	print("constant term in (C-6a)=",c5v):
	c6v:=evalf(gN4v^4/(100/c2v)):
	# these parts go to 1 from below as r0 goes to infinity
	print("remaining constant parts from lower bound for d: c6v=",c6v,", at r0=2, c6v^(1/3/(3r0-2))=",c6v^(1/3/(3*2-2)),", at r0=3, c6v^(1/3/(3r0-2))=",c6v^(1/3/(3*3-2))):
	if c6v>1 then
		print("BAD: c6v=",c6v," must be less than 1"):
		return():
	fi:

	# start work to remove N_a	
	print("d LB using only b and u"):
	vRHS7:=simplify(subs(nA=d*b^4,dLB1),symbolic):
	print("d>",vRHS7):
	dExp3:=r0/(-2+3*r0):
	vRHS7:=simplify(vRHS7/d^dExp3,symbolic):
	dExp3:=simplify(1-dExp3,symbolic):
	print("dExp3=",dExp3):
	dLB2:=simplify(vRHS7^(1/dExp3),symbolic):
	print("d>",dLB2):
	
	bExp2:=4*r0/(r0-1):
	print("b exponent=4+",simplify(bExp2-4)," at r0=2=",subs(r0=2,bExp2)):
	c7v:=evalf(10/sqrt(c2v)):
	print("constant term before (C-6b)=",c7v):
	c7v:=ceil(c7v):
	print("constant term after rounding and before (C-6b)=",c7v):
	c7v:=evalf(c7v/gN4v^2*c3v^(1/2/(2-1))):
	print("constant term in (C-6b)=",c7v):
	print("compare to dLB1, which yields d>",solve(subs(c2=c2v,c3=c3v,gN4=2,nA=b^4*d,r0=2,dLB1)=d,d)):
end proc:

round_down:=proc(num,places)
	local e,v:
	if num<0 or num=0 then
		print("ERROR in round_down(): num=",num," must be positive"):
		return(10^1000):
	end if:
	e:=floor(log(num)/log(10))-(places-1):
	#print("num=",num,", e=",e):
	v:=floor(num/10.0^e)*10.0^e:
	#print("v=",v):
	return(v):
end proc:

round_up:=proc(num,places)
	local e,v:
	if num<0 or num=0 then
		print("ERROR in round_up(): num=",num," must be positive"):
		return(10^1000):
	fi:
	e:=floor(log(num)/log(10))-(places-1):
	v:=ceil(num/10.0^e)*10.0^e:
	return(v):
end proc:
